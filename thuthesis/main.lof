\contentsline {figure}{\numberline {1.1}{\ignorespaces 如图所示为快手发现页和同城页的页面设计，本文主要关注右子图即同城页。在同城页展现给用户的视频会先根据用户与视频作者之间的距离筛选。\relax }}{3}{figure.caption.11}% 
\contentsline {figure}{\numberline {2.1}{\ignorespaces 如图所示为整个服务机制的系统架构图。智能终端会先向定位服务器发送定位请求，定位服务器根据用户是信号发射源或接收端采取不同的算法计算用户位置，之后返回给终端。获得位置后，终端将向广告服务器发送广告请求，服务器计算完成后返回要投放给用户的广告。\relax }}{10}{figure.caption.12}% 
\contentsline {figure}{\numberline {2.2}{\ignorespaces 如图所示为针对一次访问投放广告的工作流程，其中箭头上的序号代表了执行顺序。流程从客户端发起广告请求开始，之后中心服务器依次请求召回广、预测用户对被召回广告的打分和打算投放的广告。我们的算法将部署在投放策略服务器上。中心服务器、召回服务器、分数预测服务器和投放策略服务器共同构成了广告服务器（群）。\relax }}{11}{figure.caption.13}% 
\contentsline {figure}{\numberline {3.1}{\ignorespaces 发射源坐标为(0, 0)，十个接收者的位置坐标为 (-126, 62), (-339, 166), (390, 76), (-178, 333), (482, 122), (-234, 141), (230, -45), (-352, 279), (-104, 465), (366, -139)。\relax }}{19}{figure.caption.14}% 
\contentsline {figure}{\numberline {3.2}{\ignorespaces 100,000次仿真下，RMSE、置信区间和CRLB的结果。正方形是我们的算法GBM，上三角是ML，圆圈是LLS。点线为RMSE的95\%置信区间。实线是无偏估计的CRLB，虚线是通过蒙特卡洛法估计的GBM的CRLB。\relax }}{20}{figure.caption.15}% 
\contentsline {figure}{\numberline {4.1}{\ignorespaces 如图展示了欧氏距离、流形间距离和切线距离的关系。在信号空间，$\mathbf {s}$是测试点，$\mathaccent "0362{\mathbf {s}}$是一个训练点。 $\bm {M_s}$ 和 $\bm {M_{st}}$分别是$\mathbf {s}$和$\mathaccent "0362{\mathbf {s}}$所在的流形。$\bm {\mathaccent "0362{M}_{st}}$是$\bm {M_{st}}$在$\mathaccent "0362{\mathbf {s}}$处的切线。$d_E$代表$\mathbf {s}$和$\mathaccent "0362{\mathbf {s}}$之间的欧氏距离。$d_M$代表$\bm {M_s}$ 和 $\bm {M_{st}}$两个流形之间的距离。$d_T$代表$\mathbf {s}$到$\bm {M_{st}}$的切线距离。显然，相比于$d_E$，$d_T$是对$d_M$更好的估计。\relax }}{25}{figure.caption.17}% 
\contentsline {figure}{\numberline {4.2}{\ignorespaces 如图对比了${\left \delimiter "026B30D x \right \delimiter "026B30D }_1$和$\frac {1}{\beta }\mathbf {1}^T\mathrm {ln}\left [ \mathrm {cosh} \left ( \beta x \right ) \right ] + \mathrm {ln}2$两种函数的差异，其中$\beta =10,000$。蓝色实线代表曼哈顿距离所基于的绝对值函数，红色虚线代表双曲正切函数的原函数。从图中可以看到，当$|x|>0.0002$时，二者已经几乎完全重合。\relax }}{28}{figure.caption.18}% 
\contentsline {figure}{\numberline {4.3}{\ignorespaces 如图所示为我们采集数据的三个区域的卫星图。左上子图为荷塘区域，右上子图为教学区，下子图为紫荆公寓区。\relax }}{30}{figure.caption.19}% 
\contentsline {figure}{\numberline {4.4}{\ignorespaces 如图所示为指数变换中参数$\lambda $与定位均方根误差RMSE的关系曲线，蓝色星形线是曼哈顿距离，红色方形线是余弦相似度，绿色圆形线是欧氏距离。当$\lambda >7$后RMSE几乎没有明显变化。\relax }}{31}{figure.caption.20}% 
\contentsline {figure}{\numberline {4.5}{\ignorespaces 如图所示为KNN中参数$k$与定位均方根误差RMSE的关系曲线，蓝色星形线是曼哈顿距离，绿色圆形线是余弦相似度，红色方形线是欧氏距离。当$k$取2或3时可以取得最小定位误差。\relax }}{32}{figure.caption.22}% 
\contentsline {figure}{\numberline {4.6}{\ignorespaces 如图所示为求解切线距离时求导数所需近邻数$N$与定位均方根误差RMSE的关系曲线，蓝色星形线是曼哈顿切线距离MTD，红色方形线是近似曼哈顿切线距离AMTD。由于实验次数少导致曲线波动较大，不过大致可以看出当$N>2$时几乎没有太大的变化。\relax }}{33}{figure.caption.23}% 
\contentsline {figure}{\numberline {5.1}{\ignorespaces 仿真实验中测试数据集的缺投情况统计。训练数据和测试数据各有50万次PV，同时有400个广告均有50的需求量。这个缺投量的分布和高斯分布非常相似，其中$\mu = -0.49$，$\sigma = 9.41$。\relax }}{45}{figure.caption.26}% 
\contentsline {figure}{\numberline {5.2}{\ignorespaces PIKA算法和FC在一个月内的FTR比较以及相对提升。除了一天之外（2018/11/21），PIKA的FTR均高于FC的。相比于FC，PIKA的FTR平均提升了$+3.48\%$。\relax }}{48}{figure.caption.27}% 
\contentsline {figure}{\numberline {5.3}{\ignorespaces PIKA算法和FC在一个月内的CTR比较以及相对提升。PIKA和FC的CTR在实验期间没有明显区别，而且最终的平均CTR，PIKA只相对提升了$+0.0446\%$，可以忽略不计。\relax }}{48}{figure.caption.28}% 
\contentsline {figure}{\numberline {5.4}{\ignorespaces PIKA算法和FC在一个月内的LTR比较以及相对提升。LTR的表现与CTR类似，平均LTR的相对提升是$+0.752\%$\relax }}{49}{figure.caption.29}% 
\contentsline {figure}{\numberline {5.5}{\ignorespaces PIKA算法和FC在一个月内的HTR比较以及相对提升。不同于其他三个指标，HTR越低越好。这两条曲线相互交错，平均HTR的提升是$-1.10\%$。\relax }}{49}{figure.caption.30}% 
